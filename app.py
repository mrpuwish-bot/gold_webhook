import os
import time
from datetime import datetime
from flask import Flask, request, jsonify
from openai import OpenAI
import requests
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

# --- CONFIGURATION ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
GPT_MODEL = "gpt-4o"

client = OpenAI(api_key=OPENAI_API_KEY)

# --- ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô (Deduplication Cache) ---
last_signal_cache = {
    "fingerprint": None,
    "timestamp": 0
}
DEDUPLICATION_WINDOW_SECONDS = 5 # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡πâ‡∏≥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
# -------------------------------------------------------------

@app.route('/webhook', methods=['POST'])
def webhook():
    if not request.is_json:
        return jsonify({"status": "‚ùå Error", "message": "Request must be JSON"}), 400
        
    data = request.json
    
    # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô ---
    current_fingerprint = str(data)
    current_timestamp = time.time()

    if (current_fingerprint == last_signal_cache["fingerprint"] and 
        current_timestamp - last_signal_cache["timestamp"] < DEDUPLICATION_WINDOW_SECONDS):
        
        print(f"Duplicate signal ignored: {current_fingerprint}")
        return jsonify({"status": "üü° Ignored", "message": "Duplicate signal."}), 200

    last_signal_cache["fingerprint"] = current_fingerprint
    last_signal_cache["timestamp"] = current_timestamp
    print(f"New signal received: {current_fingerprint}")
    # -------------------------------------------------------------

    symbol = data.get("symbol", "N/A")
    alerts = data.get("alerts", [])
    # [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ tv_time ‡πÄ‡∏õ‡πá‡∏ô unix_timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    unix_timestamp = data.get("time", 0) 

    if not alerts:
        return jsonify({"status": "‚ùå Error", "message": "No alerts data found."}), 400

    prompt = build_prompt(symbol, alerts, unix_timestamp)
    gpt_reply = ask_gpt(prompt)
    send_telegram_message(gpt_reply)

    return jsonify({"status": "‚úÖ Sent to Telegram", "GPT_Response": gpt_reply}), 200

def build_prompt(symbol, alerts, unix_timestamp):
    alerts_by_tf = {alert.get("timeframe"): alert for alert in alerts}

    def extract_tf_data(tf):
        alert_data = alerts_by_tf.get(tf)
        if alert_data:
            return f"""- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {alert_data.get("type", "N/A")} | ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: {alert_data.get("pattern", "N/A")} | ‡∏£‡∏≤‡∏Ñ‡∏≤: {alert_data.get("price", "N/A")}"""
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        
    # [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    readable_time = "N/A"
    if isinstance(unix_timestamp, (int, float)) and unix_timestamp > 0:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å Milliseconds (‡∏à‡∏≤‡∏Å TradingView) ‡πÄ‡∏õ‡πá‡∏ô Seconds
        readable_time = datetime.fromtimestamp(unix_timestamp / 1000).strftime('%Y-%m-%d %H:%M:%S')

    m5_alert = alerts_by_tf.get("M5", {})
    signal_type = m5_alert.get("type", "Unknown Signal")

    # [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö Prompt ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    return f"""‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å TradingView:
- ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: {symbol}
- ‡πÄ‡∏ß‡∏•‡∏≤: {readable_time}
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {signal_type}

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
- H1 Trend: {extract_tf_data("H1")}
- M15 Setup: {extract_tf_data("M15")}
- M5 Entry: {extract_tf_data("M5")}
"""

def ask_gpt(prompt):
    system_prompt = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ GoldScalpGPT ‚Äî ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ó‡∏£‡∏î XAU/USD ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Timeframe H1, M15, M5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:

üîÅ ‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
- H1 = ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å (Trend)
- M15 = ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (Setup)
- M5 = ‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ (Entry Confirmation)

üìä ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
- ‡∏°‡∏µ trap ‡∏´‡∏£‡∏∑‡∏≠ wick ‡∏¢‡∏≤‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏´‡∏°?
- ‡∏°‡∏µ‡∏Å‡∏≤‡∏£ fake breakout, stop hunt, ‡∏´‡∏£‡∏∑‡∏≠ liquidity grab ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
- ‡∏°‡∏µ‡πÅ‡∏£‡∏á reject ‡∏ó‡∏µ‡πà zone supply/demand ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
- ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏£‡∏Å‡πÅ‡∏ô‡∏ß‡πÑ‡∏´‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ follow-through ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?

‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå:
- ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ: BUY ‡∏´‡∏£‡∏∑‡∏≠ SELL
- ‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ (Entry Price) ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
- ‡∏ö‡∏≠‡∏Å SL ‡πÅ‡∏•‡∏∞ TP ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡πÄ‡∏ä‡πà‡∏ô SL = xxx, TP1 = xxx, TP2 = xxx
- ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• 1‚Äì2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î

üïê ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:
- Scalp Signal: 5‚Äì15 ‡∏ô‡∏≤‡∏ó‡∏µ
- Structure Signal: 15‚Äì45 ‡∏ô‡∏≤‡∏ó‡∏µ

‚ùå ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏≤ ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡∏ä‡∏µ‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î"""
    
    try:
        response = client.chat.completions.create(
            model=GPT_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        error_message = f"[‚ùå GPT ERROR]: {str(e)}"
        print(error_message)
        return error_message

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "Markdown"}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"[‚ùå Telegram ERROR]: {str(e)}")

if __name__ == '__main__':
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Gunicorn ‡∏´‡∏£‡∏∑‡∏≠ Waitress ‡πÅ‡∏ó‡∏ô
    app.run(host="0.0.0.0", port=10000, debug=False)

