from flask import Flask, request, jsonify
from openai import OpenAI
import requests
from dotenv import load_dotenv
import os

load_dotenv()

app = Flask(__name__)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
GPT_MODEL = "gpt-4o"

client = OpenAI(api_key=OPENAI_API_KEY)

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.json
    symbol = data.get("symbol", "XAUUSD")
    alerts = data.get("alerts", [])
    time = data.get("time", "unknown")

    prompt = build_prompt(symbol, alerts, time)
    gpt_reply = ask_gpt(prompt)
    send_telegram_message(gpt_reply)

    return jsonify({"status": "‚úÖ ‡∏™‡πà‡∏á‡πÑ‡∏õ Telegram ‡πÅ‡∏•‡πâ‡∏ß", "GPT_‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤": gpt_reply}), 200

def build_prompt(symbol, alerts, time):
    def extract_tf(tf):
        for alert in alerts:
            if alert.get("timeframe") == tf:
                return f"""- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {alert.get("type")}
- ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: {alert.get("pattern")}
- ‡∏£‡∏≤‡∏Ñ‡∏≤: {alert.get("price")}"""
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"

    return f"""
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå XAU/USD ‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå GoldScalpGPT:

üìç ‡πÄ‡∏ß‡∏•‡∏≤: {time}
üìå ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: {symbol}

üîπ H1 Trend:
{extract_tf("H1")}

üîπ M15 Setup:
{extract_tf("M15")}

üîπ M5 Entry Confirm:
{extract_tf("M5")}

‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô:
- ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: BUY ‡∏´‡∏£‡∏∑‡∏≠ SELL
- ‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ (Entry), SL, TP1, TP2
- ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
- ‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∑‡∏≠‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ
‚ùå ‡∏ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î: ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ WAIT ‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
"""

def ask_gpt(prompt):
    try:
        response = client.chat.completions.create(
            model=GPT_MODEL,
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ GoldScalpGPT ‚Äî ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á XAU/USD ‡∏î‡πâ‡∏ß‡∏¢ 3 Timeframe: H1, M15, M5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"[‚ùå GPT ERROR]: {str(e)}"

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"[‚ùå Telegram ERROR]: {str(e)}")

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=10000, debug=True)
