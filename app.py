import os
import time
from datetime import datetime
from flask import Flask, request, jsonify
from openai import OpenAI
import requests
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

# --- CONFIGURATION ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
GPT_MODEL = "gpt-4o"

client = OpenAI(api_key=OPENAI_API_KEY)

# --- Deduplication ---
last_signal_cache = {
    "fingerprint": None,
    "timestamp": 0
}
DEDUPLICATION_WINDOW_SECONDS = 5

@app.route('/webhook', methods=['POST'])
def webhook():
    if not request.is_json:
        return jsonify({"status": "‚ùå Error", "message": "Request must be JSON"}), 400

    data = request.json

    current_fingerprint = str(data)
    current_timestamp = time.time()
    if (current_fingerprint == last_signal_cache["fingerprint"] and 
        current_timestamp - last_signal_cache["timestamp"] < DEDUPLICATION_WINDOW_SECONDS):
        print(f"Duplicate signal ignored: {current_fingerprint}")
        return jsonify({"status": "üü° Ignored", "message": "Duplicate signal."}), 200

    last_signal_cache["fingerprint"] = current_fingerprint
    last_signal_cache["timestamp"] = current_timestamp
    print(f"New signal received: {current_fingerprint}")

    try:
        prompt = build_prompt_from_pine(data)
        gpt_reply = ask_gpt(prompt)
        send_telegram_message(gpt_reply)
        return jsonify({"status": "‚úÖ Sent to Telegram", "GPT_Response": gpt_reply}), 200
    except Exception as e:
        return jsonify({"status": "‚ùå Error", "message": str(e)}), 500

def build_prompt_from_pine(data):
    symbol = data.get("symbol", "N/A")
    timestamp = data.get("timestamp", 0)
    signal = data.get("signal", {})
    trade = data.get("trade_parameters", {})
    context = data.get("market_context", {})
    fundamentals = data.get("fundamentals", {})
    tech = data.get("technical_details", {})

    readable_time = "N/A"
    if isinstance(timestamp, (int, float)) and timestamp > 0:
        readable_time = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

    return f"""
üìä ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏à‡∏≤‡∏Å Pine Script

‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: {symbol}
‡πÄ‡∏ß‡∏•‡∏≤: {readable_time}
‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå: {signal.get('strategy')} | ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: {signal.get('direction')} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {signal.get('confidence')}%
‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: {signal.get('reason')}

üìà ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤: {trade.get('entry')} | SL ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: {trade.get('stop_loss')} | TP ‡∏Å‡∏•‡∏≤‡∏á: {trade.get('take_profit')}
RR: {trade.get('risk_reward')} | Pip Risk: {trade.get('pip_risk')} | ‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡πá‡∏≠‡∏ï: {trade.get('position_size')}

üß† ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡∏•‡∏≤‡∏î:
- ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {context.get('session')} | ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå H1: {context.get('h1_trend')} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå: {context.get('trend_strength')}
- RSI M15: {context.get('rsi_m15')} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô: {context.get('volatility_ratio')}

üìâ ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:
- DXY: Bearish={fundamentals.get('dxy_bearish')} / Bullish={fundamentals.get('dxy_bullish')}
- Bond Yield: Fall={fundamentals.get('yield_falling')} / Rise={fundamentals.get('yield_rising')}
- VIX: {fundamentals.get('vix_level')}

üìê ‡πÇ‡∏ã‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ:
- EMA50/200 H1: {tech.get('ema50_h1')} / {tech.get('ema200_h1')}
- ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö: {tech.get('support')} | ‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô: {tech.get('resistance')}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô:
- ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Entry, SL, TP1, TP2 ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡∏≠‡∏¥‡∏á RR ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
- ‡πÉ‡∏´‡πâ SL ‡∏ß‡∏≤‡∏á‡∏ô‡∏≠‡∏Å zone ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÇ‡∏î‡∏ô trap/wick
- TP1 ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ | TP2 ‡πÉ‡∏ä‡πâ momentum ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡πÇ‡∏•‡πà‡∏á
- ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÇ‡∏ã‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô fakeout, trap, RSI ‡∏Å‡∏•‡∏≤‡∏á, vol ‡∏ï‡πà‡∏≥, ‡∏ä‡∏ô‡πÇ‡∏ã‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
- ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏∑‡∏≠‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
"""

def ask_gpt(prompt):
    system_prompt = """
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ GoldScalpGPT ‚Äî ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û (XAU/USD) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ 3 ‡πÑ‡∏ó‡∏°‡πå‡πÄ‡∏ü‡∏£‡∏°:
- H1: ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å
- M15: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
- M5: ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤

‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Pine Script ‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
- ‡∏ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏: ‡πÄ‡∏Ç‡πâ‡∏≤ BUY ‡∏´‡∏£‡∏∑‡∏≠ SELL
- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Entry, SL, TP1, TP2 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ WAIT ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô ‡πÜ
- ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏î‡∏≤ ‡∏≠‡∏¢‡πà‡∏≤ over-optimize
- ‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡∏£‡∏±‡∏î‡∏Å‡∏∏‡∏° ‡πÑ‡∏°‡πà‡∏Ç‡∏≤‡∏¢‡∏ù‡∏±‡∏ô
"""

    response = client.chat.completions.create(
        model=GPT_MODEL,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "Markdown"}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"[‚ùå Telegram ERROR]: {str(e)}")

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=10000, debug=False)
