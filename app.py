from flask import Flask, request, jsonify
from openai import OpenAI
import requests
from dotenv import load_dotenv
import os

load_dotenv()

app = Flask(__name__)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
GPT_MODEL = "gpt-4o"

client = OpenAI(api_key=OPENAI_API_KEY)

@app.route('/webhook', methods=['POST'])
def webhook():
    if not request.is_json:
        return jsonify({"status": "‚ùå Error", "message": "Request must be JSON"}), 400
        
    data = request.json
    symbol = data.get("symbol", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    alerts = data.get("alerts", [])
    time = data.get("time", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

    if not alerts:
        return jsonify({"status": "‚ùå Error", "message": "No alerts data found in payload"}), 400

    # [‡πÉ‡∏´‡∏°‡πà] ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì" ‡∏à‡∏≤‡∏Å M5 alert
    m5_alert = next((alert for alert in alerts if alert.get("timeframe") == "M5"), {})
    signal_type = m5_alert.get("type", "Unknown Signal") # e.g., "Scalp Signal" or "Structure Signal"

    prompt = build_prompt(symbol, alerts, time, signal_type) # ‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô prompt
    gpt_reply = ask_gpt(prompt)
    send_telegram_message(gpt_reply)

    return jsonify({"status": "‚úÖ ‡∏™‡πà‡∏á‡πÑ‡∏õ Telegram ‡πÅ‡∏•‡πâ‡∏ß", "GPT_‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤": gpt_reply}), 200

def build_prompt(symbol, alerts, time, signal_type):
    alerts_by_tf = {alert.get("timeframe"): alert for alert in alerts}

    def extract_tf_data(tf):
        alert_data = alerts_by_tf.get(tf)
        if alert_data:
            return f"""- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {alert_data.get("type", "N/A")}
- ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: {alert_data.get("pattern", "N/A")}
- ‡∏£‡∏≤‡∏Ñ‡∏≤: {alert_data.get("price", "N/A")}"""
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"

    # [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á] ‡πÄ‡∏û‡∏¥‡πà‡∏° signal_type ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô prompt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ GPT ‡∏£‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
    return f"""
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å TradingView:

- ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: {symbol}
- ‡πÄ‡∏ß‡∏•‡∏≤: {time}
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {signal_type}

- H1 Trend:
{extract_tf_data("H1")}

- M15 Setup:
{extract_tf_data("M15")}

- M5 Entry Confirm:
{extract_tf_data("M5")}
"""

def ask_gpt(prompt):
    try:
        # [‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô System Prompt ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö
        system_prompt = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ GoldScalpGPT ‚Äî ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ó‡∏£‡∏î XAU/USD ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Timeframe H1, M15, M5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:

üîÅ ‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
- H1 = ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å (Trend)
- M15 = ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (Setup)
- M5 = ‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ (Entry Confirmation)

üìä ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:
- ‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á trap ‡∏´‡∏£‡∏∑‡∏≠ wick ‡∏¢‡∏≤‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏´‡∏°?
- ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î fake breakout, stop hunt, ‡∏´‡∏£‡∏∑‡∏≠ liquidity grab ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
- ‡∏°‡∏µ‡πÅ‡∏£‡∏á reject ‡∏ó‡∏µ‡πà‡πÇ‡∏ã‡∏ô supply/demand ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?

‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå:
- ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ: **BUY** ‡∏´‡∏£‡∏∑‡∏≠ **SELL**
- ‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ (Entry Price) ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
- ‡∏ö‡∏≠‡∏Å SL ‡πÅ‡∏•‡∏∞ TP ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡πÄ‡∏ä‡πà‡∏ô SL = xxx, TP1 = xxx, TP2 = xxx
- ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• 1‚Äì2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î

üïê ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "Scalp Signal": 5‚Äì15 ‡∏ô‡∏≤‡∏ó‡∏µ
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "Structure Signal": 15‚Äì45 ‡∏ô‡∏≤‡∏ó‡∏µ

‚ùå **‡∏Å‡∏é‡πÄ‡∏´‡∏•‡πá‡∏Å: ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏≤!** ‡∏´‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Timeframe ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ **WAIT** ‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏±‡πâ‡∏ô‡πÜ"""

        response = client.chat.completions.create(
            model=GPT_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"[‚ùå GPT ERROR]: {str(e)}"

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "Markdown"}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"[‚ùå Telegram ERROR]: {str(e)}")

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=10000, debug=True)
