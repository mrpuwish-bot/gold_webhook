import os
import time
import json # <-- 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import json
from datetime import datetime
from flask import Flask, request, jsonify
from openai import OpenAI
import requests
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

# --- CONFIGURATION ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
GPT_MODEL = "gpt-4o"

client = OpenAI(api_key=OPENAI_API_KEY)

# --- Deduplication ---
last_signal_cache = {
    "fingerprint": None,
    "timestamp": 0
}
DEDUPLICATION_WINDOW_SECONDS = 5

@app.route('/webhook', methods=['POST'])
def webhook():
    # --- 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô ---
    try:
        # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (raw body) ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô text ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        raw_data = request.get_data(as_text=True)
        data = json.loads(raw_data)
    except Exception as e:
        # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏à‡∏£‡∏¥‡∏á‡πÜ
        print(f"Error parsing JSON from request body: {e}")
        print(f"Received raw data: {request.get_data(as_text=True)}") # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
        return jsonify({"status": "‚ùå Error", "message": "Failed to parse JSON body"}), 400
    # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    current_fingerprint = str(data)
    current_timestamp = time.time()
    if (current_fingerprint == last_signal_cache["fingerprint"] and
        current_timestamp - last_signal_cache["timestamp"] < DEDUPLICATION_WINDOW_SECONDS):
        print(f"Duplicate signal ignored: {current_fingerprint}")
        return jsonify({"status": "üü° Ignored", "message": "Duplicate signal."}), 200

    last_signal_cache["fingerprint"] = current_fingerprint
    last_signal_cache["timestamp"] = current_timestamp
    print(f"New signal received: {current_fingerprint}")

    try:
        prompt = build_prompt_from_pine(data)
        gpt_reply = ask_gpt(prompt)
        send_telegram_message(gpt_reply)
        return jsonify({"status": "‚úÖ Sent to Telegram", "GPT_Response": gpt_reply}), 200
    except Exception as e:
        print(f"An error occurred during processing: {e}") # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ print error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ debug ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        return jsonify({"status": "‚ùå Error", "message": str(e)}), 500

def build_prompt_from_pine(data):
    symbol = data.get("symbol", "N/A")
    timestamp = data.get("timestamp", 0)
    signal = data.get("signal", {})
    trade = data.get("trade_parameters", {})
    context = data.get("market_context", {})
    tech = data.get("technical_analysis", {})
    confidence_score = data.get("confidence_score", "N/A")
    risk = data.get("risk_assessment", {})
    metadata = data.get("metadata", {})

    readable_time = "N/A"
    if isinstance(timestamp, (int, float)) and timestamp > 0:
        readable_time = datetime.fromtimestamp(timestamp / 1000).strftime('%Y-%m-%d %H:%M:%S')

    return f"""
üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å Pine Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ (XAU/USD)

üïí ‡πÄ‡∏ß‡∏•‡∏≤: {readable_time}
‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: {symbol}
‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå: {signal.get("strategy")} | ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {signal.get("type")} | ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {signal.get("reason")}
Confidence Score: {confidence_score}%

üéØ Trade Plan
- Entry: {trade.get("entry")}
- SL: {trade.get("sl")}
- TP: {trade.get("tp")}
- RR Ratio: {trade.get("rr_ratio")}
- Pip Risk: {trade.get("pip_risk")}
- Risk %: {trade.get("risk_pct")}

üìâ Market Context
- H1 ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå: {context.get("h1_trend")} ({context.get("trend_strength")})
- EMA50 H1: {context.get("ema50_h1")}, EMA200 H1: {context.get("ema200_h1")}
- EMA Distance: 50={context.get("ema50_distance")}, 200={context.get("ema200_distance")}
- ATR M15: {context.get("atr_m15")} | Volatility: {context.get("volatility_percentile")}%
- RSI M15: {context.get("rsi_m15")}
- Pattern M5: {context.get("m5_pattern")}
- Session: {context.get("trading_session")}
- Pullback Depth: {context.get("pullback_depth")}
- Support: {context.get("support_level")}, Resistance: {context.get("resistance_level")}

üìå Technical
- Divergence: {tech.get("divergence_present")} ({tech.get("divergence_type")})
- BB Position: {tech.get("bb_position")}
- Price vs EMA50: {tech.get("price_vs_ema50")}
- Volatility Regime: {tech.get("volatility_regime")}
- Confluence Factors: {tech.get("confluence_factors")}

üìä Risk Assessment
- Session Quality: {risk.get("session_quality")}
- Trend Alignment: {risk.get("trend_alignment")}
- Volatility Favorable: {risk.get("volatility_favorable")}

üß† ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏´‡∏°
- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤: ‡πÉ‡∏´‡πâ Entry, SL, TP1, TP2 ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
- ‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á SL/TP ‡∏à‡∏≤‡∏Å RR ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏¥‡∏á‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô
- ‡πÄ‡∏ô‡πâ‡∏ô TP1 ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢, TP2 ‡πÉ‡∏ä‡πâ momentum
- ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÄ‡∏ä‡πà‡∏ô wick trap, sideway, vol ‡∏ï‡πà‡∏≥
- ‡∏ö‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô scalp ‡∏´‡∏£‡∏∑‡∏≠ hold ‡∏Å‡∏µ‡πà‡∏ô‡∏≤‡∏ó‡∏µ
"""

def ask_gpt(prompt):
    system_prompt = """
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ GoldScalpGPT ‚Äî ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û (XAU/USD) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ 3 ‡πÑ‡∏ó‡∏°‡πå‡πÄ‡∏ü‡∏£‡∏°:
- H1: ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å
- M15: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
- M5: ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤

‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Pine Script ‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
- ‡∏ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏: ‡πÄ‡∏Ç‡πâ‡∏≤ BUY ‡∏´‡∏£‡∏∑‡∏≠ SELL
- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Entry, SL, TP1, TP2 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ WAIT ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô ‡πÜ
- ‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏î‡∏≤ ‡∏≠‡∏¢‡πà‡∏≤ over-optimize
- ‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡∏£‡∏±‡∏î‡∏Å‡∏∏‡∏° ‡πÑ‡∏°‡πà‡∏Ç‡∏≤‡∏¢‡∏ù‡∏±‡∏ô
"""

    response = client.chat.completions.create(
        model=GPT_MODEL,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "Markdown"}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"[‚ùå Telegram ERROR]: {str(e)}")

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=10000, debug=False)
