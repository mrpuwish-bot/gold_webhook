import os
import time
import json
from datetime import datetime
from flask import Flask, request, jsonify
from openai import OpenAI
import requests
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

# --- CONFIGURATION ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
GPT_MODEL = "gpt-4o"

client = OpenAI(api_key=OPENAI_API_KEY)

# --- Deduplication ---
last_signal_cache = {
    "fingerprint": None,
    "timestamp": 0
}
DEDUPLICATION_WINDOW_SECONDS = 5

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json(silent=True)
        if data is None:
            raise ValueError("Request body is not valid JSON")

    except Exception as e:
        app.logger.error(f"Error parsing JSON from request body: {e}")
        app.logger.error(f"Received raw data: {request.get_data(as_text=True)}")
        return jsonify({"status": "‚ùå Error", "message": "Failed to parse JSON body"}), 400

    current_fingerprint = str(data)
    current_timestamp = time.time()
    if (current_fingerprint == last_signal_cache["fingerprint"] and
        current_timestamp - last_signal_cache["timestamp"] < DEDUPLICATION_WINDOW_SECONDS):
        app.logger.info(f"Duplicate signal ignored: {current_fingerprint}")
        return jsonify({"status": "üü° Ignored", "message": "Duplicate signal."}), 200

    last_signal_cache["fingerprint"] = current_fingerprint
    last_signal_cache["timestamp"] = current_timestamp
    app.logger.info(f"New signal received: {current_fingerprint}")

    try:
        prompt = build_prompt_from_pine(data)
        gpt_reply = ask_gpt(prompt)
        send_telegram_message(gpt_reply)
        return jsonify({"status": "‚úÖ Sent to Telegram", "GPT_Response": gpt_reply}), 200
    except Exception as e:
        app.logger.error(f"An error occurred during processing: {e}")
        return jsonify({"status": "‚ùå Error", "message": str(e)}), 500

def build_prompt_from_pine(data):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á Market Structure
    symbol = data.get("symbol", "N/A")
    timestamp = data.get("timestamp", 0)
    signal = data.get("signal", {})
    trade = data.get("trade_parameters", {})
    context = data.get("market_context", {})
    structure = data.get("market_structure", {}) # <-- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Market Structure
    tech = data.get("technical_analysis", {})
    confidence_score = data.get("confidence_score", "N/A")
    
    readable_time = datetime.fromtimestamp(timestamp / 1000).strftime('%Y-%m-%d %H:%M:%S') if timestamp > 0 else "N/A"

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ AI
    return f"""
üìä **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö:**
- **‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì:** {signal.get("strategy")} {signal.get("type")}, Conf: {confidence_score}%
- **‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå H1:** {context.get("h1_trend")} ({context.get("trend_strength")})
- **‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö M5:** {context.get("m5_pattern")}
- **Session:** {context.get("trading_session")}
- **Volatility:** {context.get("volatility_percentile")}%
- **RSI M15:** {context.get("rsi_m15")}
- **‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:** Entry: {trade.get("entry")}, SL: {trade.get("sl")}, TP: {trade.get("tp")}

üèóÔ∏è **‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏•‡∏≤‡∏î (Market Structure):**
- **PDH:** {structure.get("prev_day_high", "N/A")}
- **PDL:** {structure.get("prev_day_low", "N/A")}
- **M15 Swing High:** {structure.get("m15_last_swing_high", "N/A")}
- **M15 Swing Low:** {structure.get("m15_last_swing_low", "N/A")}

üß† **‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à:**
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏•‡∏≤‡∏î' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á System Prompt
"""

def ask_gpt(prompt):
    system_prompt = """
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ GoldScalpGPT ‚Äî **‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå** ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏´‡πâ **‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û

**‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:**

1.  **[‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞] ‡∏™‡∏£‡∏∏‡∏õ (Executive Summary):** 1 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏à‡∏ö ‡∏ö‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
2.  **‚úÖ ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô (Pros):** (‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÜ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏Ç‡πâ‡∏≠)
3.  **‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á (Cons):** (‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÜ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏Ç‡πâ‡∏≠)
4.  **üéØ ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (Plan):**
    - Entry: [‡∏£‡∏≤‡∏Ñ‡∏≤]
    - SL: [‡∏£‡∏≤‡∏Ñ‡∏≤]
    - TP1: [‡∏£‡∏≤‡∏Ñ‡∏≤]
    - TP2: [‡∏£‡∏≤‡∏Ñ‡∏≤]

**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô **‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏•‡∏≤‡∏î' (PDH/PDL/Swings) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î SL ‡πÅ‡∏•‡∏∞ TP ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠ ‡∏´‡πâ‡∏≤‡∏°‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö**
"""

    response = client.chat.completions.create(
        model=GPT_MODEL,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "Markdown"}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        app.logger.error(f"[‚ùå Telegram ERROR]: {str(e)}")

# ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Log ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
@app.route('/')
def hello():
    app.logger.info("Hello, Render! Logging test successful.")
    return "Hello, Render! Logging test successful."

# ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô Server ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏°‡∏≠
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=10000, debug=False)
