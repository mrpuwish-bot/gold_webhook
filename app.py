import os
import time
from flask import Flask, request, jsonify
from openai import OpenAI
import requests
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)

# --- CONFIGURATION ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
GPT_MODEL = "gpt-4o"

client = OpenAI(api_key=OPENAI_API_KEY)

# --- [‡πÉ‡∏´‡∏°‡πà] ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô (Deduplication Cache) ---
# ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥" ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
last_signal_cache = {
    "fingerprint": None,
    "timestamp": 0
}
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡πâ‡∏≥ (‡πÄ‡∏ä‡πà‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
DEDUPLICATION_WINDOW_SECONDS = 5
# -------------------------------------------------------------

@app.route('/webhook', methods=['POST'])
def webhook():
    if not request.is_json:
        return jsonify({"status": "‚ùå Error", "message": "Request must be JSON"}), 400
        
    data = request.json
    
    # --- [‡πÉ‡∏´‡∏°‡πà] ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô ---
    # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠" ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    current_fingerprint = str(data)
    current_timestamp = time.time()

    # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥" ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    if (current_fingerprint == last_signal_cache["fingerprint"] and 
        current_timestamp - last_signal_cache["timestamp"] < DEDUPLICATION_WINDOW_SECONDS):
        
        # 3. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ß‡πà‡∏≤ "‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô" ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        print(f"Duplicate signal ignored: {current_fingerprint}")
        return jsonify({"status": "üü° Ignored", "message": "Duplicate signal received within the cooldown window."}), 200

    # 4. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ "‡∏à‡∏î‡∏à‡∏≥" ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
    last_signal_cache["fingerprint"] = current_fingerprint
    last_signal_cache["timestamp"] = current_timestamp
    print(f"New signal received: {current_fingerprint}")
    # -------------------------------------------------------------

    symbol = data.get("symbol", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    alerts = data.get("alerts", [])
    tv_time = data.get("time", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

    if not alerts:
        return jsonify({"status": "‚ùå Error", "message": "No alerts data found in payload"}), 400

    m5_alert = next((alert for alert in alerts if alert.get("timeframe") == "M5"), {})
    signal_type = m5_alert.get("type", "Unknown Signal")

    prompt = build_prompt(symbol, alerts, tv_time, signal_type)
    gpt_reply = ask_gpt(prompt)
    send_telegram_message(gpt_reply)

    return jsonify({"status": "‚úÖ Sent to Telegram", "GPT_Response": gpt_reply}), 200

def build_prompt(symbol, alerts, time, signal_type):
    alerts_by_tf = {alert.get("timeframe"): alert for alert in alerts}

    def extract_tf_data(tf):
        alert_data = alerts_by_tf.get(tf)
        if alert_data:
            return f"""- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {alert_data.get("type", "N/A")}
- ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: {alert_data.get("pattern", "N/A")}
- ‡∏£‡∏≤‡∏Ñ‡∏≤: {alert_data.get("price", "N/A")}"""
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        
    # ‡πÅ‡∏õ‡∏•‡∏á Unix timestamp ‡∏à‡∏≤‡∏Å Pine Script (milliseconds) ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    readable_time = "N/A"
    if isinstance(time, (int, float)):
        readable_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time / 1000))

    return f"""‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å TradingView:
- ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå: {symbol}
- ‡πÄ‡∏ß‡∏•‡∏≤: {readable_time}
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {signal_type}
- H1 Trend: {extract_tf_data("H1")}
- M15 Setup: {extract_tf_data("M15")}
- M5 Entry: {extract_tf_data("M5")}
"""

def ask_gpt(prompt):
    system_prompt = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ GoldScalpGPT ‚Äî ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ó‡∏£‡∏î XAU/USD ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Timeframe H1, M15, M5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:

üîÅ ‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
- H1 = ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å (Trend)
- M15 = ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (Setup)
- M5 = ‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ (Entry Confirmation)

üìä ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
- ‡∏°‡∏µ trap ‡∏´‡∏£‡∏∑‡∏≠ wick ‡∏¢‡∏≤‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏´‡∏°?
- ‡∏°‡∏µ‡∏Å‡∏≤‡∏£ fake breakout, stop hunt, ‡∏´‡∏£‡∏∑‡∏≠ liquidity grab ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
- ‡∏°‡∏µ‡πÅ‡∏£‡∏á reject ‡∏ó‡∏µ‡πà zone supply/demand ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
- ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏£‡∏Å‡πÅ‡∏ô‡∏ß‡πÑ‡∏´‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ follow-through ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?

‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå:
- ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ: BUY ‡∏´‡∏£‡∏∑‡∏≠ SELL
- ‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ (Entry Price) ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
- ‡∏ö‡∏≠‡∏Å SL ‡πÅ‡∏•‡∏∞ TP ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡πÄ‡∏ä‡πà‡∏ô SL = xxx, TP1 = xxx, TP2 = xxx
- ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• 1‚Äì2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î

üïê ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:
- Scalp: 5‚Äì15 ‡∏ô‡∏≤‡∏ó‡∏µ
- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: 15‚Äì45 ‡∏ô‡∏≤‡∏ó‡∏µ

‚ùå ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏≤ ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡∏ä‡∏µ‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î"""
    
    try:
        response = client.chat.completions.create(
            model=GPT_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"[‚ùå GPT ERROR]: {str(e)}")
        return f"[‚ùå GPT ERROR]: {str(e)}"

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "Markdown"}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"[‚ùå Telegram ERROR]: {str(e)}")

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=10000, debug=False)

